(setq load-path (cons  "~/site-lisp" load-path))

(setq visible-bell t)

(setq inhibit-startup-message t)
(setq initial-scratch-message "")

(when window-system
  (fringe-mode 0))

(setq message-log-max 256)

(setq column-number-mode t)

(setq transient-mark-mode t)    ;highlights selections

(global-hl-line-mode 1)

;; To customize the background color
(set-face-background 'hl-line "#222")  ;; Emacs 22 Only

;; (set-frame-parameter (selected-frame) 'alpha '(95 50))
;; (add-to-list 'default-frame-alist '(alpha 95 50))

(set-default-font "DejaVu Sans Mono:pixelsize=14")
(set-fontset-font (frame-parameter nil 'font) 'han
                  (font-spec :family "AR PL New Sung" :size 20))
(set-fontset-font (frame-parameter nil 'font) 'kana
                  (font-spec :family "Sazanami Mincho" :size 20))

(setq display-time-24hr-format t)
(display-time)

(set-default 'frame-title-format
             (list "" "emacs" "@" (getenv "USERNAME") " : %f" ))


;;(menu-bar-mode -1)        ;hide menu-bar
;;(scroll-bar-mode -1)      ;hide scroll-bar
(tool-bar-mode -1)          ;hide tool-bar

(fset 'yes-or-no-p 'y-or-n-p)

(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)

;; (global-set-key (kbd "TAB") 'my-insert-tab)
;; (defun my-insert-tab ()
;;   (interactive)
;;   (if (looking-at " ")
;;       (insert "    ")
;;       (indent-for-tab-command))
;; )

(global-linum-mode 1)

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

(auto-image-file-mode)

(defun w32-restore-frame ()
    "Restore a minimized frame"
     (interactive)
     (w32-send-sys-command 61728))

(defun w32-maximize-frame ()
    "Maximize the current frame"
    (interactive)
    (w32-send-sys-command 61488))

;;(w32-maximize-frame)

(setq default-major-mode 'text-mode)

(setq hs-minor-mode-prefix [(control o)])

(set-scroll-bar-mode nil)   ; no scroll bar, even in x-window system (recommended)

;;(require 'setnu)
;;(setnu-mode)
;;(add-hook 'text-mode-hook 'turn-on-setnu-mode)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'c-mode-hook '(lambda () (interactive)
            (c-set-style "stroustrup") (imenu-add-menubar-index)
            (setq comment-start "// ") (setq comment-end "")
            (gtags-mode 1) ) )
(add-hook 'emacs-lisp-mode-hook '(lambda () (interactive)
            (imenu-add-menubar-index) ) )
(add-hook 'c++-mode-hook '(lambda () (interactive)
            (c-set-style "stroustrup") (imenu-add-menubar-index) ) )
(add-hook 'python-mode-hook '(lambda () (interactive)
            (imenu-add-menubar-index) ) )
;;(require 'csharp-mode)
(add-hook 'csharp-mode-hook '(lambda ()
                              (setq c-basic-offset 4
                                    tab-width 4
                                    indent-tabs-mode nil
                                    c-set-style "stroustrup")))
(setq auto-mode-alist (cons '("\\.cs$" . csharp-mode) auto-mode-alist))
(autoload 'csharp-mode "csharp-mode" "C# editing mode." t)

(setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist (cons '("python" . python-mode)
                                    interpreter-mode-alist))
(autoload 'python-mode "python-mode" "Python editing mode." t)

(autoload #'espresso-mode "espresso" "Start espresso-mode" t)
(add-to-list 'auto-mode-alist '("\\.js$" . espresso-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . espresso-mode))

(setq auto-mode-alist (cons '("\\.clj$" . clojure-mode) auto-mode-alist))
(autoload 'clojure-mode "clojure-mode" "Clojure editing mode." t)

(require 'which-func)
(which-func-mode 1)
(setq which-func-unknown "<unknown function>")

(require 'mouse)
(defun wcy-mark-some-thing-at-point()
  (interactive)
  (let* ((from (point))
         (a (mouse-start-end from from 1))
         (start (car a))
         (end (cadr a))
         (goto-point (if (= from start) end start)))
    (if (eq last-command 'wcy-mark-some-thing-at-point)
        (progn
          ;; exchange mark and point
          (goto-char (mark-marker))
          (set-marker (mark-marker) from))
      (push-mark (if (= goto-point start) end start) nil t)
      (when (and (interactive-p) (null transient-mark-mode))
        (goto-char (mark-marker))
        (sit-for 0 500 nil))
      (goto-char goto-point))))
(define-key global-map (kbd "M-C-l") 'wcy-mark-some-thing-at-point)

(define-key isearch-mode-map (kbd "M-i") 'isearch-query-replace-current)
(defun isearch-query-replace-current ()
  "replace current searching string."
  (interactive)
  (let ((case-fold-search isearch-case-fold-search)
        (from-string isearch-string))
    (if (not isearch-success)
        (message "search string not found")
      (progn
        (isearch-exit)
        (goto-char (min (point) isearch-other-end)))
      ;;(isearch-abort)
      (perform-replace
       from-string
       (read-from-minibuffer (format "Query replace %s with: " from-string) "" nil nil query-replace-to-history-variable from-string t)
       t                                ; query flag
       isearch-regexp
       nil))))

(require 'redo)
(global-set-key (kbd "M-z") 'redo)

;;(global-set-key [(control ?\;)] 'semantic-ia-complete-symbol-menu)

(defun dy-refresh-buffer()
     "refresh buffer"
     (interactive)
     ;;(setnu-mode)
     (revert-buffer))

(global-set-key [f1] 'recenter)
(global-set-key [f2] 'other-window)
(global-set-key [f3] 'delete-region)
(global-set-key [f4] 'kill-this-buffer)
(global-set-key [f5] 'dy-refresh-buffer)
(global-set-key [f6] 'goto-line)
(global-set-key [f12] 'highlight-80+-mode)
(global-set-key [f11] 'auto-complete-mode)
(require 'align)
(global-set-key [f9] 'align)

;;(require 'cua)
;;(CUA-mode t)

(global-set-key [(control ?\.)] 'ska-point-to-register)
(global-set-key [(control ?\,)] 'ska-jump-to-register)
(defun ska-point-to-register()
  "Store cursorposition _fast_ in a register.
Use ska-jump-to-register to jump back to the stored
position."
  (interactive)
  (setq zmacs-region-stays t)
  (point-to-register 8))

(defun ska-jump-to-register()
  "Switches between current cursorposition and position
that was stored with ska-point-to-register."
  (interactive)
  (setq zmacs-region-stays t)
  (let ((tmp (point-marker)))
        (jump-to-register 8)
        (set-register 8 tmp)))

(setq delete-auto-save-files t)

;; Standard org stuff
(setq load-path (cons "~/site-lisp/org-6.30/lisp" load-path))
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
;; Custom keywords
;;(setq org-todo-keywords
;;         '((type "NEXT" "GOAL" "WAITING" "DELEGATED" "SOMEDAY" "|" "DONE")
;;     (sequence "QUESTION" "|" "ANSWERED")
;;     (sequence "|" "CANCELED")))
(setq org-hide-leading-stars t)    ; only show one *
(setq org-log-done t)      ; add CLOSED when complete item
(setq org-deadline-warning-days 14)
(setq org-startup-folded 'showall)  ; Best default for small files with tables
(setq org-display-custom-times t)
(setq org-time-stamp-custom-formats "%y%m%d %A %H:%M:%S")

(require 'tabbar)
(tabbar-mode)
;;(global-set-key [(control f11)] 'tabbar-local-mode)
;;(global-set-key [(control shift tab)] 'tabbar-backward)
;;(global-set-key [(control tab)]       'tabbar-forward)

(require 'wcy-swbuff)
(global-set-key [(control tab)] 'wcy-switch-buffer-forward)
(global-set-key [(control shift tab)] 'wcy-switch-buffer-backward)


(defun dy-tabbar-buffer-groups (buffer)
  "Return the list of group names BUFFER belongs to.
Return only one group for each buffer."
  (with-current-buffer (get-buffer buffer)
    (cond
     ((or (get-buffer-process (current-buffer))
          (memq major-mode
                '(comint-mode compilation-mode)))
      '("Process")
      )
     ((member (buffer-name)
              '("*scratch*" "*Messages*"))
      '("Common")
      )
     ((eq major-mode 'dired-mode)
      '("Dired")
      )
     ((memq major-mode
            '(help-mode apropos-mode Info-mode Man-mode))
      '("Help")
      )
     ((memq major-mode
            '(rmail-mode
              rmail-edit-mode vm-summary-mode vm-mode mail-mode
              mh-letter-mode mh-show-mode mh-folder-mode
              gnus-summary-mode message-mode gnus-group-mode
              gnus-article-mode score-mode gnus-browse-killed-mode))
      '("Mail")
      )
     ((memq major-mode
            '(c-mode c++-mode))
      '("C/C++")
      )
     (t
      (list
       (if (and (stringp mode-name) (string-match "[^ ]" mode-name))
           mode-name
         (symbol-name major-mode)))
      )
     )))

(setq tabbar-buffer-groups-function
      'dy-tabbar-buffer-groups)

(require 'color-theme)
(color-theme-initialize)
;;(require 'colorful-obsolescence)
;;(color-theme-colorful-obsolescence)
;;(color-theme-deep-blue)

(defun color-theme-tango ()
  "A color theme based on Tango Palette."
  (interactive)
  (color-theme-install
   '(color-theme-tango
     ((background-color . "#2e3436")
      (background-mode . dark)
      (border-color . "#888a85")
      (cursor-color . "#fce94f")
      (foreground-color . "#eeeeec")
      (mouse-color . "#8ae234"))
     ((help-highlight-face . underline)
      (ibuffer-dired-buffer-face . font-lock-function-name-face)
      (ibuffer-help-buffer-face . font-lock-comment-face)
      (ibuffer-hidden-buffer-face . font-lock-warning-face)
      (ibuffer-occur-match-face . font-lock-warning-face)
      (ibuffer-read-only-buffer-face . font-lock-type-face)
      (ibuffer-special-buffer-face . font-lock-keyword-face)
      (ibuffer-title-face . font-lock-type-face))
     (border ((t (:background "#888a85"))))
     (fringe ((t (:background "grey10"))))
     (mode-line ((t (:foreground "#eeeeec" :background "#555753"))))
     (region ((t (:background "#555753"))))
     (font-lock-builtin-face ((t (:foreground "#729fcf"))))
     (font-lock-comment-face ((t (:foreground "#888a85"))))
     (font-lock-constant-face ((t (:foreground "#8ae234"))))
     (font-lock-doc-face ((t (:foreground "#888a85"))))
     (font-lock-keyword-face ((t (:foreground "#729fcf" :bold t))))
     (font-lock-string-face ((t (:foreground "#ad7fa8" :italic t))))
     (font-lock-type-face ((t (:foreground "#8ae234" :bold t))))
     (font-lock-variable-name-face ((t (:foreground "#eeeeec"))))
     (font-lock-warning-face ((t (:bold t :foreground "#f57900"))))
     (font-lock-function-name-face ((t (:foreground "#edd400" :bold t :italic t))))
     (comint-highlight-input ((t (:italic t :bold t))))
     (comint-highlight-prompt ((t (:foreground "#8ae234"))))
     (isearch ((t (:background "#f57900" :foreground "#2e3436"))))
     (isearch-lazy-highlight-face ((t (:foreground "#2e3436" :background "#e9b96e"))))
     (show-paren-match-face ((t (:foreground "#2e3436" :background "#73d216"))))
     (show-paren-mismatch-face ((t (:background "#ad7fa8" :foreground "#2e3436"))))
     (minibuffer-prompt ((t (:foreground "#729fcf" :bold t))))
     (info-xref ((t (:foreground "#729fcf"))))
     (info-xref-visited ((t (:foreground "#ad7fa8"))))
     )))

(defun color-theme-blackboard ()
  "Color theme by JD Huntington, based off the TextMate Blackboard theme, created 2008-11-27"
  (interactive)
  (color-theme-install
   '(color-theme-blackboard
     ((background-color . "#0C1021")
      (background-mode . dark)
      (border-color . "black")
      (cursor-color . "#A7A7A7")
      (foreground-color . "#F8F8F8")
      (mouse-color . "sienna1"))
     (default ((t (:background "#0C1021" :foreground "#F8F8F8"))))
     (blue ((t (:foreground "blue"))))
     (bold ((t (:bold t))))
     (bold-italic ((t (:bold t))))
     (border-glyph ((t (nil))))
     (buffers-tab ((t (:background "#0C1021" :foreground "#F8F8F8"))))
     (font-lock-builtin-face ((t (:foreground "#F8F8F8"))))
     (font-lock-comment-face ((t (:italic t :foreground "#AEAEAE"))))
     (font-lock-constant-face ((t (:foreground "#D8FA3C"))))
     (font-lock-doc-string-face ((t (:foreground "DarkOrange"))))
     (font-lock-function-name-face ((t (:foreground "#FF6400"))))
     (font-lock-keyword-face ((t (:foreground "#FBDE2D"))))
     (font-lock-preprocessor-face ((t (:foreground "Aquamarine"))))
     (font-lock-reference-face ((t (:foreground "SlateBlue"))))

     (font-lock-regexp-grouping-backslash ((t (:foreground "#E9C062"))))
     (font-lock-regexp-grouping-construct ((t (:foreground "red"))))

     (font-lock-string-face ((t (:foreground "#61CE3C"))))
     (font-lock-type-face ((t (:foreground "#8DA6CE"))))
     (font-lock-variable-name-face ((t (:foreground "#FF6400"))))
     (font-lock-warning-face ((t (:bold t :foreground "Pink"))))
     (gui-element ((t (:background "#D4D0C8" :foreground "black"))))
     (region ((t (:background "#253B76"))))
     (mode-line ((t (:background "grey75" :foreground "black"))))
     (highlight ((t (:background "#222222"))))
     (highline-face ((t (:background "SeaGreen"))))
     (italic ((t (nil))))
     (left-margin ((t (nil))))
     (text-cursor ((t (:background "yellow" :foreground "black"))))
     (toolbar ((t (nil))))
     (underline ((nil (:underline nil))))
     (zmacs-region ((t (:background "snow" :foreground "ble")))))))

(provide 'color-theme-tango)
(color-theme-tango)

(defun dy-one-blank-line-end ()
"Leave exactly one blank line at the end of the file."
 (interactive)
 (save-excursion
     (goto-char (point-max))
     (open-line 1)
     (delete-blank-lines)))

(setq whitespace-check-indent-whitespace nil) ; don't touch my indent tabs
(defun dy-write-file-hook ()
  (delete-trailing-whitespace)                  ; delelte trailing blanks/tabs.
  (dy-one-blank-line-end))              ; leave one line in the end.

(add-hook 'write-file-hooks 'dy-write-file-hook)

(defun dpp-beginning-of-next-defun ()
    "Move to beginning of next defun"
    (interactive)
    (c-end-of-defun)
    (c-end-of-defun)
    (beginning-of-defun)
    )

(defun dpp-beginning-of-prev-defun ()
    "Move to beginning of previous defun"
    (interactive)
    (beginning-of-defun)
    )

(global-set-key [f10] 'dpp-beginning-of-next-defun)
(global-set-key [(C-f10)] 'dpp-beginning-of-prev-defun)

(defun scroll-n-lines-ahead (&optional n)
  "Scroll ahead N lines (1 by default)."
  (interactive "P")
  (scroll-ahead (prefix-numeric-value n)))

(defun scroll-n-lines-behind (&optional n)
  "Scroll behind N lines (1 by default)."
  (interactive "P")
  (scroll-behind (prefix-numeric-value n)))

;;(global-set-key [M-up]   'scroll-n-lines-behind)
;;(global-set-key [M-down] 'scroll-n-lines-ahead)

;; Useful function for inserting date quickly
(defun dy-insert-date ()
  (interactive)
  (insert (format-time-string "%Y%m%d")))
(global-set-key "\C-ct" 'dy-insert-date)

(require 'ido)
(ido-mode t)

(require 'table)
(add-hook 'text-mode-hook 'table-recognize)
(autoload 'table-insert "table" "WYGIWYS table editor")

(show-paren-mode)
(global-set-key "%" 'match-paren)

(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
    ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
    (t (self-insert-command (or arg 1)))))

(require 'ctypes)
(ctypes-auto-parse-mode 1)

(setq default-fill-column 80)

;; backup policies
(setq make-backup-files t)
(setq version-control t)
(setq kept-old-versions 2)
(setq kept-new-versions 5)
(setq delete-old-versions t)
(setq backup-directory-alist '(("" . "c:\\uebk")))

(setq-default truncate-partial-width-windows nil)

(setq kill-ring-max 200)

(setq c-hungry-delete-key t)

;;(defun dy-indent-or-complete ()
;;   (interactive)
;;   (if (looking-at "\\>")
;;    (hippie-expand nil)
;;    (indent-for-tab-command))
;; )

;;(global-set-key [(control tab)] 'dy-indent-or-complete)

(global-set-key [(control ?\;)] 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        senator-try-expand-semantic
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

(require 'dabbrev-expand-multiple)
(global-set-key "\M-/" 'dabbrev-expand-multiple)
(setq dabbrev-expand-multiple-select-keys '("a" "s" "d" "f" "g" "h" "j" "k" "l" ))
(add-to-list 'dabbrev-expand-multiple-multi-selection-keys "m")
(add-to-list 'dabbrev-expand-multiple-next-keys "n")
(add-to-list 'dabbrev-expand-multiple-previous-keys "p")
(setq dabbrev-expand-multiple-tooltip-timeout 2000)
(setq dabbrev-expand-multiple-tooltip-timeout 10)
(setq dabbrev-expand-multiple-tooltip-params
      '((foreground-color . "HotPink")
        (background-color . "SeaGreen")
        (border-color . "black")))
(setq dabbrev-expand-multiple-highlight-face 'highlight)
(setq dabbrev-expand-multiple-inline-show-face 'underline)
(setq dabbrev-expand-multiple-inline-show-face nil)
(setq dabbrev-expand-multiple-use-tooltip t)

(require 'smart-compile)

;;   %F  absolute pathname            ( /usr/local/bin/netscape.bin )
;;   %f  file name without directory  ( netscape.bin )
;;   %n  file name without extention  ( netscape )
;;   %e  extention of file name       ( bin )

(global-set-key [(control up)] 'smart-compile)
(global-set-key [(control down)] 'smart-run)

(global-set-key [(control left)] (lambda() (interactive)
   (n-p-command ((next-error))
                ((n (next-error))
                 (p (previous-error)))
                )))

(define-skeleton skeleton-include
  "generate include<>" ""
  > "#include <"
  (completing-read "Include File:"
                   (mapcar #'(lambda (f) (list f ))
                           (apply 'append
                                  (mapcar
                                   #'(lambda (dir)
                                       (directory-files dir))
                                   (list "/usr/include"
                                         "/usr/local/include"
                                         "/usr/include/g++-3")))))
  ">")

(require 'dired-single)
(defun dy-dired-init()
(define-key dired-mode-map [return] 'dired-single-buffer)
(define-key dired-mode-map (kbd "^")   '(lambda () (interactive)
            (dired-single-buffer ".."))))

(add-hook 'dired-load-hook 'dy-dired-init)

(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)

(global-set-key (kbd "C-c j") 'imenu)

;;(mouse-avoidance-mode 'cat-and-mouse)

(require 'moccur-edit)
(setq dmoccur-mask '("\\.c" "\\.cc" "\\.cpp" "\\.h" "\\.hpp" "\\.java" "\\.py" ))
(setq dmoccur-exclusion-mask '("\\.cache" "\\.out" "\\.svn-base" "\\.svn" "\\.hg"))

(global-auto-revert-mode 1)

(require 'wdired)
(autoload 'wdired-change-to-wdired-mode "wdired")
(add-hook 'dired-load-hook
          '(lambda ()
             (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
             (define-key dired-mode-map
               [menu-bar immediate wdired-change-to-wdired-mode]
               '("Edit File Names" . wdired-change-to-wdired-mode))))

(defun wy-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
         char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))

;;(define-key global-map (kbd "C-c a") 'wy-go-to-char)

(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

(require 'xcscope)
(setq cscope-do-not-update-database t)

;; Load CEDET
(load-file "~/site-lisp/cedet-1.0pre7/common/cedet.el")

;; Enabling various SEMANTIC minor modes.  See semantic/INSTALL for more ideas.
;; Select one of the following:

;; * This enables the database and idle reparse engines
;;(semantic-load-enable-minimum-features)

;; * This enables some tools useful for coding, such as summary mode
;;   imenu support, and the semantic navigator
(semantic-load-enable-code-helpers)

;; * This enables even more coding tools such as the nascent intellisense mode
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
;; (semantic-load-enable-guady-code-helpers)

;; * This turns on which-func support (Plus all other code helpers)
;; (semantic-load-enable-excessive-code-helpers)

;; This turns on modes that aid in grammar writing and semantic tool
;; development.  It does not enable any other features such as code
;; helpers above.
;; (semantic-load-enable-semantic-debugging-helpers)

(add-to-list 'load-path
                   "~/site-lisp/ecb-2.40")

(require 'ecb)
(require 'ecb-autoloads)

(setq ecb-acto-compatibility-check nil)

(setq ecb-compile-window-height 8)
(setq ecb-compilation-buffer-names (quote (("*Calculator*") ("*vc*") ("*vc-diff*") ("*Apropos*") ("*Occur*") ("*shell*") ("\\*[cC]ompilation.*\\*" . t) ("\\*i?grep.*\\*" . t) ("*JDEE Compile Server*") ("*Help*") ("*Completions*") ("*Backtrace*") ("*Compile-log*") ("*bsh*") ("*Messages*") ("*Python*"))))

(setq ecb-tip-of-the-day nil)

(setq ecb-layout-name "leftright2")
(setq ecb-windows-width 0.2)

(custom-set-variables
 '(ecb-options-version "2.40"))

(add-to-list 'load-path
                  "~/site-lisp/yasnippet-0.6.1c")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/site-lisp/yasnippet-0.6.1c/snippets")
(require 'dropdown-list)
(setq yas/prompt-functions '(yas/dropdown-prompt
                             yas/ido-prompt
                             yas/completing-prompt))

(setq yas/wrap-around-region t)

;---Save the State of Emacs to be Loaded next time it is started---
(defun gk-state-saver ()
;;Save names and cursor positions of all loaded files in ".emacs.files"
  (interactive)
  (setq fname (format "%semacs.files" gk-startdir))
  (cond
   ((buffer-file-name)
    (setq currentbuffer (buffer-name)))
   (t
    (setq currentbuffer nil)))
  (cond
   ((y-or-n-p (format "Save state to %s? " fname))
  (switch-to-buffer "*state-saver*")
  (kill-buffer "*state-saver*")
  (switch-to-buffer "*state-saver*")
  (setq bl (buffer-list))
  (while bl
    (setq buffer (car bl))
    (setq file (buffer-file-name buffer))
    (cond
     (file
    (insert "(find-file \"" file "\")\n")
    (switch-to-buffer buffer)
    (setq mypoint (point))
    (switch-to-buffer "*state-saver*")
    (insert (format "(goto-char %d)\n" mypoint))))
    (setq bl (cdr bl)))
  (cond
   (currentbuffer
    (insert (format "(switch-to-buffer \"%s\")\n" currentbuffer))))
  (set-visited-file-name fname)
  (save-buffer)
  (kill-buffer "emacs.files")
  (cond
   (currentbuffer
    (switch-to-buffer currentbuffer))))))

;--- Save state when killing emacs ----------
(add-hook
 'kill-emacs-hook
 '(lambda ()
    (gk-state-saver)))

;--- Remember from where emacs was started --
(defvar gk-startdir "c:\\")
(message "state save directory is: %s" gk-startdir)
;(sleep-for 1)

;--- Load files from .emacs.files -----------
(cond
 ((file-exists-p (format "%semacs.files" gk-startdir))
  (load-file (format "%semacs.files" gk-startdir))))

;;(require 'anything-config)
(require 'highlight-80+)
(autoload 'highlight-80+-mode "highlight-80+"
      "highlight-80+."
      t nil)

;;;###autoload
(defun dy-insert-char-next-line (arg)
  "insert char below the cursor"
  (interactive "p")
  (let ((col (current-column))
        char)
    (setq char
          (save-excursion
            (forward-line arg)
            (move-to-column col)
            (if (= (current-column) col)
                (char-after))))
    (if char
        (insert-char char 1)
      (message (concat "Can't get charactor in "
                       (if  (< arg 0)
                           "previous"
                         "next")
                       (progn (setq arg (abs arg))
                              (if (= arg 1) ""
                                (concat " " (number-to-string arg))))
                       " line.")))))

;;;###autoload
(defun dy-insert-char-prev-line (arg)
  "insert char above the cursor"
  (interactive "p")
  (dy-insert-char-next-line (- arg)))

(global-set-key (kbd "C-8") 'dy-insert-char-next-line)
(global-set-key (kbd "C-9") 'dy-insert-char-prev-line)

(require 'w32-browser)
(eval-after-load "dired"
  '(define-key dired-mode-map [f4] (lambda ()
           (interactive)
           (w32-browser
           (dired-replace-in-string
           "/" "\\"
           (dired-get-filename))))))

(require 'doc-mode)
(define-key c-mode-map "\C-cd" 'doc-mode-fix-tag-doc)
(define-key c-mode-map "\C-cr" 'doc-mode-remove-tag-doc)
(setq doc-mode-template-start "/******************************************************************************")
(setq doc-mode-template-end   " ******************************************************************************/")

;;like vim-"*"
(defvar dy-isearch-word "")

(defun dy-isearch-word ()
  (interactive)
  (when (not mark-active)
    (let (word-beg word-end)
      (unless (looking-at "\\<")
        (if (eq (char-syntax (char-after)) ?w)
            (backward-word)
          (and (forward-word) (backward-word)))
        )
      (setq word-beg (point))
      (forward-word)
      (setq word-end (point))
      (setq dy-isearch-word (filter-buffer-substring word-beg word-end nil t))
      (backward-word)
      )
    (when (> (length dy-isearch-word) 0)
      (setq dy-isearch-word (concat "\\<" dy-isearch-word "\\>"))
      (isearch-update-ring dy-isearch-word t)
      (add-hook 'isearch-mode-end-hook 'dy-isearch-word-end-hook)
      (isearch-mode t t)
      (isearch-repeat 'forward)
      (message "%s" isearch-string))))

(global-set-key (kbd "C-*") 'dy-isearch-word)

(defun dy-isearch-word-end-hook ()
  (remove-hook 'isearch-mode-end-hook 'dy-isearch-word-end-hook)
  (setq dy-isearch-word ""))

(add-to-list 'load-path "~/site-lisp/ac")
(require 'auto-complete-config)
(ac-config-default)
(add-to-list 'ac-dictionary-directories "~/site-lisp/ac/dict")
;; (require 'ac-dabbrev)
;; (require 'auto-complete-python nil t)     ;optional
;; ;;(require 'auto-complete-cpp nil t)     ;optional
;; (require 'auto-complete-emacs-lisp nil t)     ;optional

;; Generic setup.
;; (global-auto-complete-mode t)           ;enable global-mode
;;(setq ac-auto-start t)                  ;automatically start
(setq ac-auto-start 3)
;; (setq ac-dwim t)                        ;Do what i mean
;; (setq ac-override-local-map nil)        ;don't override local map
;;(set-face-background 'ac-menu-face "lightgray")
;;(set-face-underline 'ac-menu-face "darkgray")
;;(set-face-background 'ac-selection-face "steelblue")
;; (define-key ac-complete-mode-map "\t" 'ac-expand)
;; (define-key ac-complete-mode-map "\r" 'ac-complete)
;; (define-key ac-complete-mode-map "\M-n" 'ac-next)
;; (define-key ac-complete-mode-map "\M-p" 'ac-previous)

;; ;; The mode that automatically startup.
;; (setq ac-modes
;;       '(emacs-lisp-mode
;;         ;;c-mode
;;         java-mode
;;         python-mode javascript-mode php-mode css-mode
;;         makefile-mode sh-mode erlang-mode
;;         org-mode))
;; ;; (add-to-list 'ac-trigger-commands 'org-self-insert-command) ; if you want enable auto-complete at org-mode, uncomment this line

;; The sources for common all mode.
(set-default 'ac-sources
   '(
     ac-source-yasnippet
     ;; ac-source-semantic
     ;; ac-source-imenu
     ;; ac-source-dabbrev
     ac-source-abbrev
     ac-source-words-in-same-mode-buffers
     ac-source-filename
     ac-source-functions
     ac-source-variables
     ac-source-symbols
     ac-source-features
     ac-source-dictionary
     ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Lisp mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (add-hook 'emacs-lisp-mode-hook
;;              (lambda ()
;;                (setq ac-sources '(ac-source-yasnippet ac-source-abbrev
;;                                                       ac-source-words-in-buffer ac-source-symbols))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; C-common-mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Enables omnicompletion with `c-mode-common'.
;; (add-hook 'c-mode-common-hook
;;           '(lambda ()
;;              (add-to-list 'ac-omni-completion-sources
;;                           (cons "\\." '(ac-source-semantic)))
;;              (add-to-list 'ac-omni-completion-sources
;;                           (cons "->" '(ac-source-semantic)))
;;              ))

(require 'window-numbering)
(window-numbering-mode 1)

(require 'htmlize)

(setq recent-jump-threshold 4)
(setq recent-jump-ring-length 10)
(global-set-key (kbd "C-o") 'recent-jump-jump-backward)
(global-set-key (kbd "M-o") 'recent-jump-jump-forward)
(require 'recent-jump)

;; (require 'pymacs)
;; (pymacs-load "ropemacs" "rope-")
;; (setq ropemacs-enable-autoimport 't)

(require 'drkm-fav)
(setq drkm-fav:favourite-directories-alist
       '(("local-src"  . "/duyan@192.168.204.101:")
         ("dev-src" . "/dam@192.168.204.41:")))

(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

(icomplete-mode 1)
(define-key minibuffer-local-completion-map (kbd "SPC") 'minibuffer-complete-word)

(blink-cursor-mode -1)

(dolist (map (list c-mode-base-map awk-mode-map))
  (define-key map "{" 'skeleton-c-mode-left-brace))
(defun skeleton-c-mode-left-brace (arg)
  (interactive "P")
  (if  (c-in-literal (c-most-enclosing-brace (c-parse-state)))
      (self-insert-command 1)
    ;; auto insert complex things.
    (let* ((current-line (delete-and-extract-region (line-beginning-position) (line-end-position)))
           (lines (and arg (mark t) (delete-and-extract-region (mark t) (point))))
           (after-point (make-marker)))
       ;;; delete extra blank begin and after the LINES
      (setq lines (and lines
                       (with-temp-buffer
                         (insert lines)
                         (beginning-of-buffer)
                         (delete-blank-lines)
                         (delete-blank-lines)
                         (end-of-buffer)
                         (delete-blank-lines)
                         (delete-blank-lines)
                         (buffer-string))))
      (save-excursion
        (let* ((old-point (point)))
          (insert (if current-line current-line "")  "{\n")
          (and lines (insert lines))
          (move-marker after-point (point))
          (insert "\n}")
          (indent-region old-point (point) nil)))
      (goto-char after-point)
      (c-indent-line))))

(setq-default kill-whole-line t)

(setq scroll-margin 3
      scroll-conservatively 10000)

(defun count-brf-lines (&optional is-fun)
  "display the line count and letter count of the current buffer, region, function"
  (interactive "P")
  (let (min max)
    (if is-fun
        (save-excursion
          (beginning-of-defun) (setq min (point))
          (end-of-defun) (setq max (point))
          (message "current function %s has %d lines, %d characters" (which-function) (count-lines min max) (- max min)))
      (if mark-active
          (progn
            (setq min (min (point) (mark)))
            (setq max (max (point) (mark))))
        (setq min (point-min))
        (setq max (point-max)))
      (if (or (= 1 (point-min)) mark-active)
          (if mark-active
              (message "current region has %d lines, %d characters" (count-lines min max) (- max min))
            (message "current buffer has %d lines, %d characters" (count-lines min max) (- max min)))
        (let ((nmin min) (nmax max))
          (save-excursion
            (save-restriction
              (widen)
              (setq min (point-min))
              (setq max (point-max))))
          (message "narrow buffer has %d lines, %d characters, non-narrow buffer has %d lines, %d characters"
                   (count-lines nmin nmax) (- nmax nmin) (count-lines min max) (- max min)))))))
(global-set-key (kbd "C-x l") 'count-brf-lines)
(global-set-key (kbd "C-x L") '(lambda () (interactive) (count-brf-lines t)))

(require 'gtags)
(global-set-key "\M-t" 'gtags-find-tag)
(global-set-key "\M-r" 'gtags-find-rtag)
(global-set-key "\M-s" 'gtags-find-symbol)
(global-set-key "\M-p" 'gtags-pop-stack)
(global-set-key [?\C-.] 'gtags-pop-stack)
(setq gtags-select-buffer-single t)

(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(require 'clojure-mode)

(require 'ibuf-ext)
(setq ibuffer-mode-hook
      (lambda ()
        (setq ibuffer-filter-groups
              '(
                ("*buffer*" (name . "\\*.*\\*"))
                ("*dired*" (mode . dired-mode))
                ("org" (mode . org-mode))
                ("php" (or (mode . php-mode)
                           (mode . html-mode)))
                ("text" (mode . text-mode))
                ("c/c++" (or (mode . c++-mode)
                            (mode . c-mode)))
                ("java" (mode . java-mode))
                ("clojure" (mode . clojure-mode))
                ("python" (mode . python-mode))
                ("shell" (mode . shell-script-mode))
                ("makefile" (or (mode . makefile-mode)
                                (mode . makefile-gmake-mode)
                                (mode . makefile-bsdmake-mode)
                                (mode . makefile-automake-mode)))

))))
